{"version":3,"sources":["logo.svg","components/SummaryItem.js","components/Summary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SummaryItem","props","totalClass","this","textColorClass","total","newCount","new","className","style","width","height","title","React","Component","Summary","dateStr","Date","toDateString","Card","margin","Header","Body","data","NewConfirmedCount","ConfirmedCount","NewDeathsCount","DeathsCount","NewTestedCount","TestedCount","NewLondonCount","LondonCount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,kC,uJCiC5BC,G,uDA9BX,WAAYC,GAAO,uCACTA,G,qDAGN,IAAIC,EAAWC,KAAKF,MAAMG,eAAe,qBACrCC,EAAM,KACPF,KAAKF,MAAMI,MAAM,IAEhBA,EAAMF,KAAKF,MAAMI,OAErB,IAAIC,EAAS,KAWb,OAVGH,KAAKF,MAAMM,IAAI,IAEdD,EAAS,IAAIH,KAAKF,MAAMM,KAEzBJ,KAAKF,MAAMM,IAAI,IAEdD,EAASH,KAAKF,MAAMM,KAKpB,yBAAKC,UAAU,2CAA2CC,MAAO,CAACC,MAAM,OAAQC,OAAO,SACnF,2BAAOH,UAAU,sBAAjB,OAA0C,0BAAMA,UAAWL,KAAKF,MAAMG,gBAAiBE,IACvF,wBAAIE,UAAWN,GAAaG,GAC5B,4BAAKF,KAAKF,MAAMW,Y,GA1BNC,IAAMC,YCwBjBC,E,kDArBX,WAAYd,GAAO,uCACTA,G,qDAGN,IACIe,GADK,IAAIC,MACIC,eACjB,OACA,kBAACC,EAAA,EAAD,CAAMV,MAAO,CAAE,YAAY,OAAO,YAAY,QAAQW,OAAO,SACzD,kBAACD,EAAA,EAAKE,OAAN,KACK,0BAAMb,UAAU,oBAAhB,uBAA6D,0BAAMA,UAAU,qBAAqBQ,IAEvG,kBAACG,EAAA,EAAKG,KAAN,KACI,kBAAC,EAAD,CAAaV,MAAM,YAAYL,IAAKJ,KAAKF,MAAMsB,KAAKC,kBAAmBnB,MAAOF,KAAKF,MAAMsB,KAAKE,eAAgBrB,eAAe,gBAC7H,kBAAC,EAAD,CAAaQ,MAAM,SAASL,IAAKJ,KAAKF,MAAMsB,KAAKG,eAAgBrB,MAAOF,KAAKF,MAAMsB,KAAKI,YAAavB,eAAe,cACpH,kBAAC,EAAD,CAAaQ,MAAM,SAASL,IAAKJ,KAAKF,MAAMsB,KAAKK,eAAgBvB,MAAOF,KAAKF,MAAMsB,KAAKM,YAAazB,eAAe,cACpH,kBAAC,EAAD,CAAaQ,MAAM,SAASL,IAAKJ,KAAKF,MAAMsB,KAAKO,eAAgBzB,MAAOF,KAAKF,MAAMsB,KAAKQ,YAAa3B,eAAe,uB,GAhB9GS,IAAMC,WCmBbkB,MAlBf,WAWE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,CAASe,KAZJ,CACPC,kBAAkB,GAClBC,eAAe,IACfI,YAAY,IACZD,eAAe,IACfD,YAAY,IACZD,eAAe,GACfK,YAAY,IACZD,eAAe,OCFCG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.354b3c2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nclass SummaryItem extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        let totalClass=this.props.textColorClass+' front-weight-bold';\r\n        let total=\"NA\";\r\n        if(this.props.total>0)\r\n        {\r\n            total=this.props.total;            \r\n        }\r\n        let newCount=\"NA\";\r\n        if(this.props.new>0)\r\n        {\r\n            newCount='+'+this.props.new;            \r\n        }\r\n        if(this.props.new<0)\r\n        {\r\n            newCount=this.props.new;\r\n        }\r\n        \r\n        if(total<=0){}\r\n        return(\r\n            <div className=\"border-bottom d-inline-block text-center\" style={{width:6+'rem',height:6+'rem'}}>\r\n                <small className=\"font-weigh-lighter\">New:<span className={this.props.textColorClass}>{newCount}</span></small>\r\n                <h3 className={totalClass}>{total}</h3>\r\n                <h6>{this.props.title}</h6>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default SummaryItem;","import React from 'react'\r\nimport Card from 'react-bootstrap/Card';\r\nimport SummaryItem from './SummaryItem'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nclass Summary extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        let date=new Date();\r\n        let dateStr=date.toDateString()\r\n        return(\r\n        <Card style={{ 'min-width':'9rem','max-width':'28rem',margin:'auto'}}>\r\n            <Card.Header>\r\n                 <span className=\"font-weight-bold\">COVID-19 UK Summary</span><span className=\"float-right small\">{dateStr}</span>\r\n            </Card.Header>\r\n            <Card.Body>\r\n                <SummaryItem title=\"Confirmed\" new={this.props.data.NewConfirmedCount} total={this.props.data.ConfirmedCount} textColorClass=\"text-danger\"></SummaryItem>\r\n                <SummaryItem title=\"Deaths\" new={this.props.data.NewDeathsCount} total={this.props.data.DeathsCount} textColorClass=\"text-dark\"></SummaryItem>\r\n                <SummaryItem title=\"Tested\" new={this.props.data.NewTestedCount} total={this.props.data.TestedCount} textColorClass=\"text-info\"></SummaryItem>\r\n                <SummaryItem title=\"London\" new={this.props.data.NewLondonCount} total={this.props.data.LondonCount} textColorClass=\"text-warning\"></SummaryItem>\r\n            </Card.Body>\r\n        </Card>\r\n        );\r\n    }\r\n}\r\nexport default Summary;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Summary from './components/Summary'\n\nfunction App() {\n  let data={\n    NewConfirmedCount:10,\n    ConfirmedCount:1000,\n    TestedCount:20000,\n    NewTestedCount:2000,\n    DeathsCount:144,\n    NewDeathsCount:30,\n    LondonCount:800,\n    NewLondonCount:0\n  }\n  return (\n    <div className=\"App\">\n      <Summary data={data}></Summary>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}